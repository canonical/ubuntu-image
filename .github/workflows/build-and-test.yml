name: Build and Tests

on: [pull_request]

# on:
#   push:
#     branches: 
#       - main
#   pull_request:
    
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-scenario: [short, long]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: build go binary
        run: go build ./...

      - name: apt-update
        run: sudo apt update

      - name: install-test-dependencies
        run: sudo apt install -y snapd germinate e2fsprogs mtools debootstrap eatmydata fdisk gdisk qemu-system-aarch64 qemu-user-static ubuntu-dev-tools

      - name: short tests
        if: ${{ matrix.test-scenario == 'short' }}
        run: sudo go test -timeout 0 -v -test.short -coverprofile=.coverage/coverage-short.out -coverpkg $(go list ./... 2> /dev/null | tr '\n' ",") -covermode=atomic ./...

      - name: long tests
        if: ${{ matrix.test-scenario == 'long' }}
        run: sudo go test -timeout 0 -v -coverprofile=.coverage/coverage-long.out -coverpkg $(go list ./... 2> /dev/null | tr '\n' ",") -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          flags: unittests
          files: .coverage/coverage-*.out
          verbose: true

      - name: Upload coverage report to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-image-coverage-${{ matrix.test-scenario }}
          path: .coverage/coverage-*.out
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

  mkfs-conf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: apt-update
        run: sudo apt update

      - name: install-test-dependencies
        run: sudo apt install -y devscripts

      - name: check mkfs conf updates
        id: check-mkfs
        shell: bash
        run: ./tools/check-mkfs-confs.sh
